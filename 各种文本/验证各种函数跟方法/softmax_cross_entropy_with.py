import chainer.functions as F
import numpy as np
# x = np.array([[0, 1, 2], [-1, 2, 4]], np.float32)
#
# y = F.softmax(x, axis=1)
# print(y.data)
x = np.array([[-0.00208956,-0.02234464],[-0.00393025,-0.02098988],[-0.00585067,-0.02024434],[-0.00772571, -0.01999644],
 [-0.00932403, -0.01875413],
 [-0.01092745,-0.01813426],
 [-0.01291851, -0.01843086],
 [-0.01465806, -0.01893181],
 [-0.01608384, -0.01864404],
 [-0.01690664, -0.01756182],
 [-0.01822776, -0.01768935],
 [-0.01916876, -0.01825777],
 [-0.01960417, -0.01875043],
 [-0.01971627, -0.01929725],
 [-0.01928964, -0.01918841],
 [-0.01831176, -0.0189967 ],
 [-0.0166682,  -0.01876814],
 [-0.01444324, -0.01849589],
 [-0.01214574, -0.01778052],
 [-0.0099486,  -0.01676428],
 [-0.00916046, -0.01629475],
 [-0.01162629, -0.01631894],
 [-0.0132613,  -0.01599747],
 [-0.01394316, -0.01375788],
 [-0.01329215, -0.00946629],
 [-0.01292207, -0.00540512],
 [-0.0120433,  -0.00161697]]).astype(np.float32)
o = np.array([[-0.00270347 ,-0.02310318],
 [-0.00462448, -0.02198943],
 [-0.00656789, -0.02146698],
 [-0.00838155 ,-0.02134386],
 [-0.00982162 ,-0.02000847],
 [-0.01122155 ,-0.01904478],
 [-0.0130854 , -0.01899071],
 [-0.01474497, -0.01930035],
 [-0.01611723 ,-0.01889224],
 [-0.0168996 , -0.01777852],
 [-0.01818976, -0.01792022],
 [-0.01910115, -0.01854928],
 [-0.01949697, -0.01915037],
 [-0.01955653, -0.01986096],
 [-0.01905921, -0.01998129],
 [-0.01799761 ,-0.0200904 ],
 [-0.01625625, -0.02022715],
 [-0.01390234, -0.0203359 ],
 [-0.0113964 , -0.01993204],
 [-0.00880436, -0.01920934],
 [-0.00717107 ,-0.01876523],
 [-0.00824522, -0.01952728],
 [-0.00918828 ,-0.01921514],
 [-0.0103952 , -0.01878236],
 [-0.01204192 ,-0.01871801],
 [-0.01319431 ,-0.01856187],
 [-0.01374556, -0.0168747 ],
 [-0.01345569, -0.01364509],
 [-0.01373514 ,-0.01091327],
 [-0.01377643 ,-0.00810648],
 [-0.01326445 ,-0.00461816],
 [-0.01223842 ,-0.00127487]])
#x的意思就是一共有三个预测值，预测值是1的概率最大，其实在该位置上的数字越大，预测是该数字的可能性就越高
#t的意思是三个预测值的真实标签都是结果1,y是求出来的loss
t = np.array([0 ,1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,0, 0]).astype(np.int32)
k = np.array([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0]).astype(np.int32)
p = F.softmax_cross_entropy(o, k)
y = F.softmax_cross_entropy(x, t)
print(y.data)
print(p.data)
